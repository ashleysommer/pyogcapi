[build-system]
requires = ["poetry>=1.0.10"]
build-backend = "poetry.masonry.api"

[tool.poetry]
name = "pyogcapi"
version = "0.1.0a0"
# Don't forget to change the version number in __init__.py along with this one
description = "Async OGC-API server"
license = "Apache-2.0"
authors = [
    "Ashley Sommer <Ashley.Sommer@csiro.au>"
]
readme = "README.md"
repository = "https://github.com/ashleysommer/pyogcapi"
homepage = "https://github.com/ashleysommer/pyogcapi"
keywords = ["OGC","API","OGC-API","OGCAPI","OWS","pyogcapi","async server"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Database :: Front-Ends",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Server",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Operating System :: OS Independent"
]

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/ashleysommer/pyogcapi/issues"

packages = [
    { include = "pyogcapi" },
    { include = "examples", format = "sdist" },
    { include = "test", format = "sdist" }
]

include = [
	"*.md",
	"*.txt",
	"pyproject.toml",
    "poetry.lock",
    "MANIFEST.in",
    "examples/*.py",
    "test/*.py",
    "pyocapi/*"
]

[tool.poetry.plugins] # Optional super table

[tool.poetry.plugins."pyogcapi.plugins"]
".rst" = "some_module:SomeClass"

[tool.poetry.plugins."pyogcapi.system_plugins"]
"provider.CSV" = "pyogcapi.providers.csv:CSVProvider"


[tool.poetry.dependencies]
python = "^3.6.1"  # latest version of websockets doesn't work on 3.6.0, so using Sanic requires python >= 3.6.1
setuptools = ">=40.8"
# Blacklist all versions of Sanic >=19.12 that contain the Streaming ASGI bug
sanic = ">=19.12,!=19.12.0,!=19.12.1,!=19.12.2,!=20.3.0,!=20.6.0,!=20.6.1,!=20.6.2,!=20.6.3,!=20.9.0"
sanic-plugins-framework = ">=0.9.4,<1.0"
jinja2 = ">=2.10.0,<3.0.0"
sanic-jinja2-spf = ">=0.8.0,<1.0"
sanic-cors = ">=0.10.0.post3,<1.0"
arrow = ">=0.17.0,<1.0.0"
PyYAML = ">=5.0.0,<6.0.0"
orjson = ">=3.0.0,<=3.3.1"
aiofiles = ">=0.6.0,<1.0.0"
motor = ">=2.1,<=2.4"

[tool.poetry.dev-dependencies]
pip = ">=19.3"
pyld = ">=2.0.0"
coverage = "^4.5"
pytest = "^5.0"
pytest-cov = "^2.8.1"
flake8 = "^3.7"
isort = {version="^5.0.0", python=">=3.6"}
black = {version="19.10b0", python=">=3.6"}
mypy = {version="^0.770.0", python=">=3.6"}


[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "setuppy", path = "setup.py"}

[tool.black]
line-length = "119"
skip-string-normalization = true
target-version = ['py36']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.pytest_cache
    | \.tox
    | \.venv
    | _build
    | htmlcov
    | docs
    | examples
    | pyogcapi.egg-info
    | buck-out
    | build
    | dist
    | venv
  )/
)
'''

[tool.isort]
atomic = true
default_section = "THIRDPARTY"
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = "pyogcapi"
known_third_party = ["pytest"]
line_length = 119
lines_after_imports = 2
lines_between_types = 1
multi_line_output = 3

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
skipsdist = true
envlist = py36, py37, py38, lint, type-checking

[testenv]
deps =
    poetry>=1.1.0
    py36: coveralls
passenv = TRAVIS TRAVIS_JOB_ID TRAVIS_BRANCH
skip_install = true
commands_pre = poetry install -vvv
commands =
    - poetry show
    poetry run pytest --cov=pyogcapi test/
    - poetry run coverage combine --append
    poetry run coverage report -m
    poetry run coverage html -i
    py36: - coveralls

[testenv:lint]
commands =
    - poetry show
    poetry run flake8 pyogcapi
    poetry run isort --check-only pyogcapi
    poetry run black --check --verbose --config ./pyproject.toml pyogcapi

[testenv:type-checking]
commands =
    - poetry show
    poetry run mypy --ignore-missing-imports pyogcapi

"""

